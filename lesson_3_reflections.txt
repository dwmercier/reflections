###
When would you want to use a remote repository rather than keeping all your work local?

Using a remote repository seems ideal when you're working from more than one location or device. It also seems practically necessary for projects involving more than one person. 



###
Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

It's possible that if you're working on a project with other people that someone has committed changes to a file you're currently working on. If Git automatically pulled these changes, it could overwrite or cause conflicts with your current work in that file. Pulling manually seems like the safer option.



###
Describe the differences between forks, clones, and branches. When would you use one instead of another?

A fork is a clone operation done on a repository on GitHub (or other online Git service) to another repository on GitHub. Forking doesn't give you access to the original repository, but you can make changes to your forked copy and suggest them to the owner of the original repository.
A clone is a copy of a repository. A clone can be performed regardless of whether the repository is local or remote.
A branch is a series of commits that is separate from the master of a repository. It can only be done within a repository, not between repositories.
You would fork when you want to make changes to the contents of an online repository that you don't have permission to change directly. 
You would clone when you simply want a copy of a local repository or an online repository that you have permission to change.
You would branch when you're making changes that aren't ready for the master branch of a repository you're working in.



###
What is the benefit of having a copy of the last known state of the remote stored locally?

The benefit is that you can see what changes others have made before you push your own changes. This lets you work on merging your changes with that of the remote even without a connection to the internet.



###
How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

If you weren't using a platform like GitHub to collaborate, you could still keep everyone working on the same project files by hosting the project over sftp, but you'd have to have only one person editing a project file at a time. Alternately, you could allow everyone to keep their own version of each project file and then merge the changes at set intervals or when problems arise.
Collaborating without Git or GitHub is very possible (people have been programming well before Git existed), but the workflow for doing so is probably a lot less smooth, and people are much more likely to waste time making changes that aren't necessary.
For a single person working on a small project, or for a very small team that knows each other well, working without Git might reduce some of the overhead inherent in using it.
For all other situations it seems that using Git would make work easier over the long term.