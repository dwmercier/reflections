###
What happens when you initialize a repository? Why do you need to do it?

When you initialize a repository its contents are tracked by version control. This doesn't actually create an initial commit however, you still need to do the first commit yourself.
If you don't initialize a repository, its contents are no different than that of a normal directory - nothing will be tracked.



###
How is the staging area different from the working directory and the repository? What value do you think it offers?

The working directory is where the repository's files are. The staging area is where you decide what to do with the files in the working directory before you make a commit.
The staging area allows you to make decisions before you finalize them - you can make decisions one file at a time before you go ahead and commit.



###
How can you use the staging area to make sure you have one commit per logical change?

You can compare the staging area to the last commit (using git diff --staged). You can also compare changes in the working directory to the staging area to make sure all the appropriate changes have been staged for the next commit.



###
What are some situations when branches would be helpful in keeping your history organized? How would branches help?

Branches would be helpful when you are developing new experimental features that aren't ready to be added to the main codebase yet. You could keep a working version of the main program in the master branch, work on the feature in an experimental branch, and then merge the experimental branch into the master when you're sure the feature works. if there are bug fixes in the master branch you can add them to the experimental branch as well. Different versions of the same software would also be a situation where branching is ideal. Perhaps you have versions customized for different clients or markets for example.

https://www.udacity.com/course/viewer#!/c-ud775/l-2969618657/m-2955118962



###
How do the diagrams help you visualize the branch structure?

The diagrams help show how commits are connected to each other. Once you make a new branch and switch to it, commits quite literally branch into different paths. Future commits on each branch only connect to the last commit on their branch, with no awareness or connection to commits on any other branches. 
Diagramming the branches help you see this property in a way that maps closely to that of actual physical tree branches.



###
What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

When two branches are merged, the commits of each branch are combined into one of the branches (almost always into the master.) Commits are re-ordered on the combined branch by their timestamps.
It's represented on the diagram as having two parent commits - the last commits on each of the merged branches. This is to illustrate that the history of the original branches is still maintained, even though both branches are now part of a single branch (I think this is why, but not totally sure)



###
What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

It comes down to a tradeoff between convenience and accuracy. Merging manually ensures that our conflicts are always merged properly, but it requires a larger up-front commitment of effort and time. 
If we left merging completely to Git, there's less for us to do and think about, but we might wind up with a lot of non-functional conflicting code after a merge. Clearing up these conflicts might require even more effort in the end than if we'd just made our commits manually to begin with.


